{
	"name": "RuleBaseMappingDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText_MoviesDB",
						"type": "DatasetReference"
					},
					"name": "moviesDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_Movies",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapCanonicalModel"
				},
				{
					"name": "Cast"
				},
				{
					"name": "Aggregate1"
				}
			],
			"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\tTitle as string,\n\t\tgenresgenresgenres as string,\n\t\tYear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesDB\nmoviesDB select(mapColumn(\n\t\teach(match(locate('title',lower(name)) != 0),\n\t\t\t'title' = $$),\n\t\teach(match(locate('genres',lower(name)) != 0),\n\t\t\t'genres' = $$),\n\t\teach(match(locate('rating',lower(name)) != 0),\n\t\t\t'rating' = $$),\n\t\teach(match(locate('year',lower(name)) != 0),\n\t\t\t'year' = $$),\n\t\tmovie,\n\t\trontton_tomato = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MapCanonicalModel\nMapCanonicalModel derive(year = toInteger(year),\n\t\trating = toInteger(rating)) ~> Cast\nCast aggregate(groupBy(year),\n\tAvgRating = round(avg(rating), 2),\n\t\teach(match(name != 'year'), $$ = first($$))) ~> Aggregate1\nAggregate1 sink(input(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\trating as integer,\n\t\trotton_tomato as integer,\n\t\tavg_rate as decimal(18,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\trating,\n\t\trotton_tomato = rontton_tomato,\n\t\tavg_rate = AvgRating\n\t)) ~> sink1"
		}
	}
}